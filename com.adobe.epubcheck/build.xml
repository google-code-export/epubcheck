<?xml version="1.0" encoding="utf-8"?>
<project default="buildEpubChecker">

        <tstamp>
                <format property="ISO-TODAY" pattern="yyyy-MM-dd"/>
        </tstamp>

        <!-- <property name="version" value="${ISO-TODAY}"/> -->
        <!-- Also change src/com/adobe/epubcheck/api/EpubCheck.java to match this version number -->
        <property name="version" value="3.0a"/>

        <!--project directories -->

        <property name="epubcheck.base.dir" value="./"/>
        <property name="src.dir" value="${epubcheck.base.dir}/src"/>
        <property name="build.dir" value="${epubcheck.base.dir}/bin"/>
        <property name="distribution.dir" value="${epubcheck.base.dir}/dist"/>
        <property name="temp.dir" value="${epubcheck.base.dir}/temp"/>
        <property name="util.dir" value="${epubcheck.base.dir}/util"/>
        <property name="lib.dir" value="${epubcheck.base.dir}/lib"/>


        <fileset dir="${lib.dir}" id="libs">
                <include name="jing.jar"/>
                <include name="saxon9he.jar"/>
                <include name="sac.jar"/>
                <include name="flute.jar"/>
        </fileset>

        <path id="classpath">
                <dirset dir="${epubcheck.base.dir}">
                        <include name="src/com/adobe/**"/>
                </dirset>
                <fileset refid="libs"/>
        </path>

        <target name="createDistributionDir">
                <mkdir dir="${distribution.dir}"/>
        </target>

        <target name="createBuildDir">
                <mkdir dir="${build.dir}"/>
                <mkdir dir="${build.dir}/META-INF"/>
        </target>

        <target name="removeClasses"
                description="Cleans up old class files so that the new ones can be built."
                depends="createBuildDir">
                <delete>
                        <fileset dir="${build.dir}" includes="**/*.*"/>
                </delete>
        </target>

        <target name="compile" description="Compiles all src classes" depends="removeClasses">

                <javac srcdir="${epubcheck.base.dir}" destdir="${build.dir}" source="1.5"
                        classpathref="classpath" includes="**/*.*" debug="true">
                        <compilerarg value="-Xlint:unchecked"/>
                </javac>

                <!-- copy the resource files needed at runtime-->
                <copy todir="${build.dir}">
                        <fileset dir="${src.dir}">
                                <include name="**/*.*"/>
                                <exclude name="**/*.java"/>
                        </fileset>
                </copy>
        </target>

        <!--
        ****************************
        *** binary epubcheck.jar ***
        ****************************
        -->
        <target name="buildJar"
                description="Creates binary epubcheck.jar in the distribution folder"
                depends="compile,createDistributionDir">
                <mkdir dir="${distribution.dir}"/>

                <jar jarfile="${distribution.dir}/epubcheck-${version}.jar">
                        <fileset dir="${build.dir}">
                                <include name="com/**/*.*"/>
                                <include name="org/**/*.*"/>
                        </fileset>
                        <metainf dir="${build.dir}/META-INF">
                                <include name="services/**/*.*"/>
                        </metainf>
                        <manifest>
                                <attribute name="Manifest-Version" value="1.0"/>
                                <attribute name="Main-Class"
                                        value="com.adobe.epubcheck.tool.Checker"/>
                                <attribute name="Class-Path"
                                        value="lib/jing.jar lib/saxon9he.jar lib/sac.jar lib/flute.jar"
                                />
                        </manifest>
                </jar>
        </target>


        <!--
        *******************************
        *** java binary zip ***
        *******************************
        -->
        <target name="buildBinZip" depends="buildJar"
                description="Build a zip including epubcheck.jar and 3d party dependencies in ./lib/*.jar">
                <delete file="${distribution.dir}/epubcheck-${version}.zip"/>
                <zip zipfile="${distribution.dir}/epubcheck-${version}.zip">
                        <fileset dir="${distribution.dir}">
                                <include name="epubcheck-${version}.jar"/>
                        </fileset>
                        <fileset dir="${epubcheck.base.dir}">
                                <include name="lib/*.jar"/>
                                <include name="*.txt"/>
                        </fileset>
                </zip>
        </target>

        <!-- 
        *******************************
        *** java source zip package ***
        *******************************
        -->
        <target name="buildSrcZip" depends="createDistributionDir, iso-sch-prep"
                description="Creates a epubcheck_src_${version}.zip with *.java files in the distribution folder">

                <zip zipfile="${distribution.dir}/epubcheck-src-${version}.zip">
                        <fileset dir="${epubcheck.base.dir}" includes="**/*.*"
                                excludes="dist/**/*.* bin/**/*.*"/>
                </zip>
        </target>

        <!-- 
        ********************
        *** All Packages ***
        ********************
        -->
        <target name="buildEpubChecker" description="Creates binary jar zip and source zip"
                depends="iso-sch-prep,buildSrcZip,
                                         buildBinZip
                                        "/>
        
        <target name="clean">
                <delete dir="${build.dir}"/>
                <delete dir="${temp.dir}"/>
        </target>

        <target name="iso-sch-prep"
                description="temporary solution for iso sch validation; resolve includes and abstract patterns
			and store alongside the originals in the schema dir">

                <property name="schema.30.dir" value="${src.dir}/com/adobe/epubcheck/schema/30"/>
                <iso-sch in="${schema.30.dir}/package-30.sch"
                        out="${schema.30.dir}/package-30-PREP.sch"/>
                <iso-sch in="${schema.30.dir}/epub-xhtml-30.sch"
                        out="${schema.30.dir}/epub-xhtml-30-PREP.sch"/>
                <iso-sch in="${schema.30.dir}/epub-svg-30.sch"
                        out="${schema.30.dir}/epub-svg-30-PREP.sch"/>
                <iso-sch in="${schema.30.dir}/epub-nav-30.sch"
                        out="${schema.30.dir}/epub-nav-30-PREP.sch"/>
                <iso-sch in="${schema.30.dir}/media-overlay-30.sch"
                        out="${schema.30.dir}/media-overlay-30-PREP.sch"/>
        </target>

        <macrodef name="iso-sch">
                <attribute name="in"/>
                <attribute name="out"/>
                <sequential>
                        <java classname="net.sf.saxon.Transform" classpath="${lib.dir}/saxon9he.jar">
                                <arg value="-s:@{in}"/>
                                <arg value="-xsl:${util.dir}/sch/iso-sch-include.xsl"/>
                                <arg value="-o:${temp.dir}/isosch-1.sch"/>
                        </java>
                        <java classname="net.sf.saxon.Transform" classpath="${lib.dir}/saxon9he.jar">
                                <arg value="-s:${temp.dir}/isosch-1.sch"/>
                                <arg value="-xsl:${util.dir}/sch/iso-sch-abstract.xsl"/>
                                <arg value="-o:@{out}"/>
                        </java>
                </sequential>
        </macrodef>

</project>
